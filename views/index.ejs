<!-- views/index.ejs -->
<%- include('partials/header') %>

    <div class="w-full mx-auto px-4 py-8">
        <!-- Filters section -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-8 filter">
            <form id="filterForm" class="grid grid-cols-1 md:grid-cols-5 gap-4" onsubmit="return false;">
                <!-- First Row -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Year</label>
                    <select name="year" class="w-full border border-gray-300 rounded-md p-2">
                        <option value="">All Years</option>
                        <% filters.years.sort().reverse().forEach(year=> { %>
                            <option value="<%= year %>" <%=selectedFilters.year===year ? 'selected' : '' %>>
                                <%= year %>
                            </option>
                            <% }) %>
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Make</label>
                    <select name="make" class="w-full border border-gray-300 rounded-md p-2">
                        <option value="">All Makes</option>
                        <% filters.makes.sort().forEach(make=> { %>
                            <option value="<%= make %>" <%=selectedFilters.make===make ? 'selected' : '' %>>
                                <%= make %>
                            </option>
                            <% }) %>
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Model</label>
                    <select name="model" class="w-full border border-gray-300 rounded-md p-2">
                        <option value="">All Models</option>
                        <% filters.models.sort().forEach(model=> { %>
                            <option value="<%= model %>" <%=selectedFilters.model===model ? 'selected' : '' %>>
                                <%= model %>
                            </option>
                            <% }) %>
                    </select>
                </div>

                <!-- Second Row -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Location</label>
                    <select name="location" class="w-full border border-gray-300 rounded-md p-2">
                        <option value="">All Locations</option>
                        <% filters.locations.sort().forEach(location=> { %>
                            <option value="<%= location %>" <%=selectedFilters.location===location ? 'selected' : '' %>>
                                <%= location %>
                            </option>
                            <% }) %>
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Price Sort</label>
                    <select name="price_sort" class="w-full border border-gray-300 rounded-md p-2">
                        <option value="">Default</option>
                        <option value="asc">Price: Low to High</option>
                        <option value="desc">Price: High to Low</option>
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Price Range</label>
                    <select name="price_range" class="w-full border border-gray-300 rounded-md p-2">
                        <option value="">All Prices</option>
                        <option value="0-15000">Under $15,000</option>
                        <option value="15000-30000">$15,000 - $30,000</option>
                        <option value="30000-50000">$30,000 - $50,000</option>
                        <option value="50000+">Above $50,000</option>
                    </select>
                </div>

                <!-- Button Row -->
                <div class="md:col-span-3 flex justify-center mt-4">
                    <button type="button" id="showCarsButton"
                        class="bg-blue-600 text-white px-8 py-2 rounded-md hover:bg-blue-700 transition-colors">
                        Show Cars
                    </button>
                    <button type="button" id="resetFilters"
                        class="bg-gray-500 text-white ml-5 px-8 py-2 rounded-md hover:bg-gray-600 transition-colors">
                        Reset Filters
                    </button>
                </div>
            </form>
        </div>

        <!-- Inventory Grid -->
        <div class="grid car-grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <% inventory.forEach(car=> { %>
                <div class="bg-white rounded-lg shadow-md overflow-hidden">
                    <!-- Car Image -->
                    <div class="relative">
                        <img src="<%= car.thumb || '' %>"
                            alt="<%= (car.fields?.year || '') %> <%= (car.fields?.make || '') %> <%= (car.fields?.model || '') %>"
                            class="w-full h-48 object-cover">
                        <!-- Certification Icons -->
                        <div class="absolute top-2 left-2 flex gap-2" style="display: none;">

                        </div>
                    </div>

                    <!-- Car Details -->
                    <div class="p-4">
                        <h3 class="text-xl font-bold car-name text-center">
                            <%= car.fields?.year || '' %>
                                <%= car.fields?.make ? car.fields.make.toUpperCase() : '' %>
                                    <%= car.fields?.model || '' %>
                        </h3>
                        <p class="text-gray-600 mb-2">

                        </p>

                        <!-- Mileage -->
                        <p class="text-lg font-bold mb-2 text-center">
                            <%= car.fields?.mileage ? parseInt(car.fields.mileage).toLocaleString() : '0' %><span
                                    class="text-sm ml-1">Km.</span>
                                <span class="ml-1">$</span>
                                <%= car.fields?.price ? parseInt(car.fields.price).toLocaleString() : '0' %>
                        </p>

                        <p class="text-lg font-bold mb-2 text-center">
                            <span class="ml-1">Location:</span>
                            <%= car.fields?.location%>
                        </p>

                        <!-- VIN and Stock Number -->
                        <div class="bg-gray-100 p-2 rounded mb-2">
                            <p class="text-sm">VIN: <%= car.vin || 'N/A' %>
                            </p>
                            <p class="text-sm">Stock No: <%= car.stock_number || 'N/A' %>
                            </p>
                        </div>


                        <!-- Action Buttons -->
                        <div class="flex flex-col gap-2 pt-4">
                            <button data-vin="<%= car.vin || '' %>" data-src="<%= car.src || '' %>"
                                onclick="handleCarDetails(this)"
                                class="w-full bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 text-center">
                                View Details
                            </button>
                        </div>
                    </div>
                </div>
                <% }) %>
        </div>

        <!-- Car Details Modal -->
        <!-- Car Details Modal -->
        <div id="carModal"
            class="fixed inset-0 bg-black bg-opacity-50 hidden items-start justify-center overflow-y-auto">
            <div class="my-4 bg-white rounded-lg w-full max-w-[80%] xl:max-w-[1000px]">
                <!-- Modal Header -->
                <div class="flex justify-between items-center p-4 border-b sticky top-0 bg-white z-10">
                    <h2 id="modalTitle" class="text-2xl font-bold"></h2>
                    <button onclick="closeModal()"
                        class="text-gray-500 hover:text-gray-700 text-2xl font-bold w-8 h-8 flex items-center justify-center rounded-full hover:bg-gray-100">Ã—</button>
                </div>

                <!-- Modal Content -->
                <div class="flex flex-col">
                    <!-- Top Section with iframe and Vehicle Info -->
                    <div class="flex min-h-[600px]">
                        <!-- Left side - iframe -->
                        <div class="w-3/4">
                            <div id="iframeContainer" class="w-full h-[600px]">
                                <!-- iframe will be inserted here -->
                            </div>
                        </div>

                        <!-- Right side - Vehicle Info -->
                        <div class="w-1/4 border-l">
                            <div class="p-6">
                                <h3 class="text-xl font-bold mb-6">Vehicle Info</h3>
                                <div id="vehicleInfoContainer" class="space-y-4">
                                    <!-- Vehicle info will be inserted here -->
                                </div>

                                <!-- Additional Links Section -->
                                <div class="mt-8 space-y-4 border-t pt-6">
                                    <div id="carfaxContainer" class="hidden">
                                        <a id="carfaxLink" href="#" target="_blank"
                                            class="inline-block bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 text-center w-full">
                                            Carfax Report
                                        </a>
                                    </div>
                                    <div id="inspectionContainer" class="hidden pt-4">
                                        <a id="inspectionLink" href="#" target="_blank"
                                            class="inline-block bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 text-center w-full">
                                            Inspection Report
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Features Section - Full Width -->
                    <div class="border-t p-8 bg-gray-50">
                        <h3 class="text-xl font-bold mb-6">Features</h3>
                        <div class="grid grid-cols-3 gap-12" id="featuresContainer">
                            <!-- Luxury Features -->
                            <div>
                                <h4 class="font-bold mb-4 text-lg text-gray-800">Luxury</h4>
                                <ul id="luxuryFeatures" class="space-y-3">
                                    <!-- Luxury features will be inserted here -->
                                </ul>
                            </div>

                            <!-- Safety Features -->
                            <div>
                                <h4 class="font-bold mb-4 text-lg text-gray-800">Safety</h4>
                                <ul id="safetyFeatures" class="space-y-3">
                                    <!-- Safety features will be inserted here -->
                                </ul>
                            </div>

                            <!-- Entertainment Features -->
                            <div>
                                <h4 class="font-bold mb-4 text-lg text-gray-800">Entertainment</h4>
                                <ul id="entertainmentFeatures" class="space-y-3">
                                    <!-- Entertainment features will be inserted here -->
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <script>
            document.addEventListener('DOMContentLoaded', function () {
                // Get references to form and button
                const filterForm = document.getElementById('filterForm');
                const showCarsButton = document.getElementById('showCarsButton');
                const resetFilters = document.getElementById('resetFilters');
                const modal = document.getElementById('carModal');
                const modalTitle = document.getElementById('modalTitle');

                window.closeModal = function () {
                    const modal = document.getElementById('carModal');
                    const carfaxLink = document.getElementById('carfaxLink');
                    const inspectionLink = document.getElementById('inspectionLink');
                    const iframeContainer = document.getElementById('iframeContainer');
                    const vehicleInfoContainer = document.getElementById('vehicleInfoContainer');

                    // Reset modal
                    modal.classList.add('hidden');
                    modal.classList.remove('flex');

                    // Clear containers
                    iframeContainer.innerHTML = '';
                    vehicleInfoContainer.innerHTML = '';

                    // Reset Carfax button
                    carfaxLink.classList.remove('opacity-50', 'cursor-not-allowed');
                    carfaxLink.textContent = 'View Carfax Report';
                    carfaxLink.href = '#';

                    // Reset Inspection button
                    inspectionLink.classList.remove('opacity-50', 'cursor-not-allowed');
                    inspectionLink.textContent = 'View Inspection Report';
                    inspectionLink.href = '#';
                };

                // Add click event listener to the Show Cars button
                if (showCarsButton) {
                    showCarsButton.addEventListener('click', async (e) => {
                        e.preventDefault();

                        // Get all form values
                        const year = filterForm.querySelector('[name="year"]').value;
                        const make = filterForm.querySelector('[name="make"]').value;
                        const model = filterForm.querySelector('[name="model"]').value;
                        const location = filterForm.querySelector('[name="location"]').value;
                        const priceSort = filterForm.querySelector('[name="price_sort"]').value;
                        const priceRange = filterForm.querySelector('[name="price_range"]').value;

                        // Log the values to verify they're being captured
                        console.log('Filter values:', { year, make, model, location, priceSort, priceRange });

                        try {
                            // Build query string
                            const params = new URLSearchParams();
                            if (year) params.append('year', year);
                            if (make) params.append('make', make);
                            if (model) params.append('model', model);
                            if (location) params.append('location', location);
                            if (priceSort) params.append('price_sort', priceSort);
                            if (priceRange) params.append('price_range', priceRange);

                            // Make the API call
                            const response = await fetch(`/api/inventory/search?${params.toString()}`);
                            let data = await response.json();

                            if (priceRange) {
                                data = data.filter(car => {
                                    const price = parseFloat(car.fields?.price) || 0;
                                    switch (priceRange) {
                                        case '0-15000':
                                            return price <= 15000;
                                        case '15000-30000':
                                            return price > 15000 && price <= 30000;
                                        case '30000-50000':
                                            return price > 30000 && price <= 50000;
                                        case '50000+':
                                            return price > 50000;
                                        default:
                                            return true;
                                    }
                                });
                            }

                            // Apply price sorting
                            if (priceSort) {
                                data.sort((a, b) => {
                                    const priceA = parseFloat(a.fields?.price) || 0;
                                    const priceB = parseFloat(b.fields?.price) || 0;
                                    return priceSort === 'asc' ? priceA - priceB : priceB - priceA;
                                });
                            }

                            // Update the car grid with new data
                            updateCarGrid(data);
                            updateNoResultsMessage(data.length);

                        } catch (error) {
                            console.error('Error fetching data:', error);
                        }
                    });
                }

                // Add click event listener to the Reset button
                if (resetFilters) {
                    resetFilters.addEventListener('click', () => {
                        filterForm.reset();
                        // Optionally fetch all cars again after reset
                        showCarsButton.click();
                    });
                }

                window.handleCarDetails = async function (button) {
                    try {
                        const vin = button.dataset.vin;
                        const src = button.dataset.src;

                        if (!vin || !src) {
                            throw new Error('Missing VIN or source URL');
                        }

                        // Fetch car details from API
                        const response = await fetch(`/api/inventory/car/${vin}`);
                        if (!response.ok) {
                            throw new Error('Failed to fetch car details');
                        }

                        const carData = await response.json();

                        // Process the fields
                        const fields = {
                            ...carData.fields,
                            features: carData.features,
                            '1729543266746': carData.fields['1729543266746'], // Carfax URL
                            '1729543306380': carData.fields['1729543306380']  // Inspection Status
                        };

                        showCarDetails(src, fields);

                    } catch (error) {
                        console.error('Error in handleCarDetails:', error);
                        console.log('Error loading car details. Please try again.');
                    }
                };

                // Function to update car grid with new data
                function updateCarGrid(inventory) {
                    const carGrid = document.querySelector('.car-grid');
                    if (!carGrid) return;

                    carGrid.innerHTML = inventory.map(car => `
            <div class="bg-white rounded-lg shadow-md overflow-hidden">
                <div class="relative">
                    <img src="${car.thumb || ''}" 
                         alt="${car.fields?.year || ''} ${car.fields?.make || ''} ${car.fields?.model || ''}"
                         class="w-full h-48 object-cover">
                </div>
                <div class="p-4">
                    <h3 class="text-xl font-bold car-name text-center">
                        ${car.fields?.year || ''} ${car.fields?.make ? car.fields.make.toUpperCase() : ''} ${car.fields?.model || ''}
                    </h3>
                    <p class="text-lg font-bold mb-2 text-center">
                        ${car.fields?.mileage ? parseInt(car.fields.mileage).toLocaleString() : '0'}<span class="text-sm ml-1">Km.</span>
                        <span class="ml-1">$</span>${car.fields?.price ? parseInt(car.fields.price).toLocaleString() : '0'}
                    </p>
                    <p class="text-lg font-bold mb-2 text-center">
                        <span class="ml-1">Location:</span> ${car.fields?.location}
                    </p>
                    <div class="bg-gray-100 p-2 rounded mb-2">
                        <p class="text-sm">VIN: ${car.vin || 'N/A'}</p>
                        <p class="text-sm">Stock No: ${car.stock_number || 'N/A'}</p>
                    </div>
                    <div class="flex flex-col gap-2 pt-4">
                        <button 
                    data-vin="${car.vin || ''}"
                    data-src="${car.src || ''}"
                    onclick="handleCarDetails(this)"
                    class="w-full bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 text-center">
                    View Details
                </button>
                    </div>
                </div>
            </div>
        `).join('');
                }

                // Function to update no results message
                function updateNoResultsMessage(count) {
                    const existingMessage = document.querySelector('.no-results-message');
                    if (existingMessage) {
                        existingMessage.remove();
                    }

                    if (count === 0) {
                        const carGrid = document.querySelector('.car-grid');
                        const message = document.createElement('div');
                        message.className = 'no-results-message col-span-full py-8 text-center text-gray-500';
                        message.innerHTML = `
                <div class="text-xl font-semibold mb-2">No cars match your filters</div>
                <div class="text-sm">Try adjusting your filters or <button class="text-blue-500 hover:underline" onclick="document.getElementById('resetFilters').click()">reset all filters</button></div>
            `;
                        carGrid.appendChild(message);
                    }
                }

                modal.addEventListener('click', function (e) {
                    if (e.target === this) closeModal();
                });
            });
        </script>
        <%- include('partials/footer') %>